<html><head>
<title>SpaceShip</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script type="text/javascript" src="game-controller.js"></script>
<script type="text/javascript" src="gl-matrix.js"></script>
<script type="text/javascript" src="webgl-utils.js"></script>
<script type="text/javascript" src="game-utils.js"></script>
<script type="text/javascript" src="fbo.js"></script>
<script type="text/javascript" src="heightfield.js"></script>
<script type="text/javascript" src="background.js"></script>
<script type="text/javascript" src="spaceship.js"></script>
    <script type="text/javascript" src="enemy.js"></script>
    <script type="text/javascript" src="rocket.js"></script>

    <link rel="stylesheet" type="text/css" href="assets/css/style.css">
    <script id="heightfield-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition, 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>

<script id="heightfield-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

uniform vec2 uOffset;
uniform float uAmplitude; // amplitude du bruit
uniform float uFrequency; // frequence du bruit
uniform float uPersistence; // persistence du bruit
uniform float elapsed;  // temps écoulé

varying vec2 vTextureCoord; // recuperation de la coord rasterisee

float hash(vec2 p) {
    // pseudo random fonction
    float h = dot(mod(p,vec2(100.0)),vec2(127.1,311.7));
    return -1.0 + 2.0*fract(sin(h)*43758.5453123);
}

float vnoise(in vec2 p) {
    // genere une valeur random sur une position sp�cifique d'une grille
    // pris sur shadertoy
    vec2 i = floor(p);
    vec2 f = fract(p);

    vec2 u = f*f*(3.0-2.0*f);

    return mix( mix( hash( i + vec2(0.0,0.0) ),
                     hash( i + vec2(1.0,0.0) ), u.x),
                mix( hash( i + vec2(0.0,1.0) ),
                     hash( i + vec2(1.0,1.0) ), u.x), u.y);
}

float fractalNoise(in vec2 p) {
    const int nb = 10; // nb octave -- QUALITE DE LA TEXTURE
    float f = uFrequency; // frequency
    float a = uAmplitude; // amplitude
    float e = uPersistence; // persistence

    float n = 0.0;
    for(int i=0;i<nb;++i) {
        n = n + a*vnoise(p*f);
        f = 2.0*f;
        a = a*e;
    }
    return n;
}

void main(void) {
    vec2 p = vTextureCoord*2.0-vec2(1.0); // coordonnees
    float n = fractalNoise(p+uOffset)*0.5+0.5; // bruit

    gl_FragColor = vec4(vec3(n),1.0);

}
</script>

<script id="background-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition, 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>

<script id="background-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

uniform sampler2D uHeightfield; // la texture de hauteurs
uniform vec2 uTextureSize; // la taille de la texture
varying vec2 vTextureCoord; // recuperation de la coord rasterisee

vec3 shade(in vec3 n,in float d) {


    vec2 xy = vTextureCoord.xy*2.0-vec2(1.0);
    vec3 v = -normalize(vec3(xy.x,xy.y,1.0)); // vecteur vue
    vec3 l = normalize(vec3(1.0,-0.5,1.0)); // vecteur lumière (pourrait varier au cours du temps pour de meilleurs effets)


    // Implémentation de Phong

    if(d>0.9){ //NEIGE
      vec3 ka = vec3(1,1,1);
      vec3 kd = vec3(0.5);  //Coefficient diffus
      vec3 ks = vec3(4.0);  //Coefficient spéculaire
      vec3 li = vec3(0.3);
      float q = 2.2;  //Ruguosité de la surface : + q augmente, + la surface est réflechissante
      //vec3 v = normalize(vPosition.xyz);
      vec3 r = reflect(l, n);
      float s = pow(max(dot(r,v), 0.0), q);
      vec3 c = (ka + kd*d + ks*s)*li;
      return c;

    } else if (d < 0.0) {  //EAU
      vec3 ka = vec3(0,0,1);
      vec3 kd = vec3(1.5);  // "profondeur"
      vec3 ks = vec3(3.2);  // reflets
      vec3 li = vec3(0.3);
      float q = 10.;  //Ruguosité de la surface : + q augmente, + la surface est réflechissante
      vec3 r = reflect(l, n);
      float s = pow(max(dot(r,v), 0.0), q);
      vec3 c = (ka + kd*d + ks*s)*li;
      return c;

    } else {  //JUNGLE
      vec3 ka = vec3(0,1,0);
      vec3 kd = vec3(0.0);  //Coefficient diffus
      vec3 ks = vec3(4.0);  //Coefficient spéculaire
      vec3 li = vec3(0.1);
      float q = 20.0;  //Ruguosité de la surface
      vec3 r = reflect(l, n);
      float s = pow(max(dot(r,v), 0.0), q);
      vec3 c = (ka + kd*d + ks*s)*li;
      return c;
    }
}

vec3 computeNormal() {
    const float scale = 20.0;

    vec2 ps = 1.0/uTextureSize;
    float xp = texture2D(uHeightfield,vTextureCoord+vec2( ps.x,0.0)).x;
    float xm = texture2D(uHeightfield,vTextureCoord+vec2(-ps.x,0.0)).x;
    float yp = texture2D(uHeightfield,vTextureCoord+vec2(0.0, ps.y)).x;
    float ym = texture2D(uHeightfield,vTextureCoord+vec2(0.0,-ps.y)).x;

    float gx = 0.5*(xp-xm)*scale;
    float gy = 0.5*(yp-ym)*scale;

    vec3 v1 = normalize(vec3(1.0,0.0,gx));
    vec3 v2 = normalize(vec3(0.0,1.0,gy));

    return cross(v1,v2);
}

void main(void) {
    float d = texture2D(uHeightfield,vTextureCoord).x;
    vec3 n = computeNormal();
    vec3 s = shade(n,d);
    gl_FragColor = vec4(s,1.0);

}
</script>

<script id="spaceship-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    uniform vec2 uPosition; // position du vaisseau
    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>
<script id="spaceship-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

varying vec2 vTextureCoord; // recuperation de la coord rasterisee
uniform sampler2D uSpaceshipTexture; // texture en entree

void main(void) {
    // couleur par defaut du vaisseau... a changer
    //gl_FragColor = vec4(1.0,0.0,0.0,1.0);
    gl_FragColor = texture2D(uSpaceshipTexture, vTextureCoord) * vec4(1,1.0,1.0,1.0);


}
</script>

    <script id="enemy-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    uniform vec2 uPosition; // position du vaisseau
    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>
    <script id="enemy-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

varying vec2 vTextureCoord; // recuperation de la coord rasterisee
uniform sampler2D uEnemyTexture; // texture en entree

void main(void) {
    // couleur par defaut du vaisseau... a changer
    //gl_FragColor = vec4(1.0,0.0,0.0,1.0);
    gl_FragColor = texture2D(uEnemyTexture, vTextureCoord) * vec4(1,1.0,1.0,1.0);


}
</script>


    <script id="rocket-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    uniform vec2 uPosition; // position du vaisseau
    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>
    <script id="rocket-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

varying vec2 vTextureCoord; // recuperation de la coord rasterisee
uniform sampler2D uRocketTexture; // texture en entree

void main(void) {
    // couleur par defaut du vaisseau... a changer
    //gl_FragColor = vec4(1.0,0.0,0.0,1.0);
    gl_FragColor = texture2D(uRocketTexture, vTextureCoord) * vec4(1,1.0,1.0,1.0);


}
</script>

<script type="text/javascript">

    var fbo; // le FBO utilis� pour rendre la texture de hauteur
    var heightfield; // l'objet heightfield, sa g�om�trie, son shader
    var background; // l'objet background, sa g�om�trie, son shader
    var spaceship; // l'objet spaceship, sa g�om�trie, son shader
    var enemies = [] ;
    var rockets = [];

    var elapsed;

    var ratioPopEnemies = 0.0005; // Ratio qui augmente avec le temps
    var ratioSpeedEnemies = 0.0015;

    function drawScene() {
        // initialisation du viewport
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);

        // efface les buffers de couleur et de profondeur
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        // active le FBO (a partie de la, on dessine dans la texture associ�e)
        gl.bindFramebuffer(gl.FRAMEBUFFER,fbo.id());

        // dessin du heightfield
        gl.useProgram(heightfield.shader());
        heightfield.sendUniformVariables();
        heightfield.draw();

        // desactivation du FBO (on dessine sur l'ecran maintenant)
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);

        // dessin du background (utilise la texture dessin�e pr�c�demment)
        gl.useProgram(background.shader());
        background.sendUniformVariables();
        background.draw();

        // dessin du vaisseau (shader par defaut ici)
        gl.useProgram(spaceship.shader());
        spaceship.sendUniformVariables();
        spaceship.init();


        // dessin du vaisseau (shader par defaut ici)

        // Dessin des rockets
        rockets.forEach(function(r) {
            gl.useProgram(r.shader());
            r.sendUniformVariables();
            r.init();
        });

        // Dessin des ennemies
        enemies.forEach(function (enemy) {

            gl.useProgram(enemy.shader());
            enemy.sendUniformVariables();

            if(Math.random() > 0.99) {
                shootRocketEnemy(enemy);
            }

            enemy.init(rockets);

        });

    }

    // une bonne mani�re de gerer les evenements claviers
    // permet d'avoir plusieurs touches appuy�es simultan�men
    var currentlyPressedKeys = {};

    function handleKeyDown(event) {
        currentlyPressedKeys[event.keyCode] = true;
        if (currentlyPressedKeys[32] ) {
            ShootRockets();
        }
        if ( currentlyPressedKeys[38] ) {
            moveForward();
        }
        if ( currentlyPressedKeys[40] ) {
            moveBackward();
        }
        if ( currentlyPressedKeys[37] ) {
            moveLeft();
        }
        if ( currentlyPressedKeys[39] ) {
            moveRight();
        }
    }

    function mouseClick(event) {
        ShootRockets()
    }

    function ShootRockets(){

        var r1 = new Rocket();
        r1.setPosition(r1.position[0]-0.09,r1.position[1]+0.02);
        var r2 = new Rocket();
        r2.setPosition(r1.position[0]+0.17,r1.position[1]+0.02);

        rockets.push(r1);
        rockets.push(r2);

    }

    /**
     *
     */
    function shootRocketEnemy(enemy){
        var r = new Rocket('e');
        r.setPosition(enemy.position[0],enemy.position[1] - 0.2);
        rockets.push(r);
    }

    function handleKeyUp(event) {
        currentlyPressedKeys[event.keyCode] = false;
        if (event.keyCode == 32 ) {
            ShootRockets();
        }
    }

    function handleKeys() {
        if (currentlyPressedKeys[33]) {
            // Page Up (par exemple)
            // faire quelque chose...
        }
    }

    function mouseMove(event) {
        // controle de la position du vaisseau en fonction de la souris
        // la position est remapp�e entre -1 et 1 pour cela
//        var newx = 2.0*(event.clientX/gl.viewportWidth)-1.0;
//        var newy = -(2.0*(event.clientY/gl.viewportHeight)-1.0);
//        spaceship.setPosition(newx,newy);
    }


    // animation
    var lastTime = 0;
    function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            // chaque objet est susceptible de s'animer
            var elapsed = timeNow - lastTime;
            heightfield.setParameters(elapsed);
            spaceship.setParameters(elapsed);
            background.setParameters(elapsed);
        }
        lastTime = timeNow;
    }

    function tick() {
        requestAnimFrame(tick);
        drawScene();
        //animate();
        if(running == 1){
            //requestAnimFrame(tick);
            handleKeys();
            //drawScene();
            animate();
            generateEnemies();
        }
    }


    function webGLStart() {
        // initialisation du canvas et des objets OpenGL
        var canvas = document.getElementById("SpaceShip");
        initGL(canvas);

        // init FBO
        fbo = new FBO(canvas.width,canvas.height,1,false);

        // init de tous les shaders
        initHeightfieldShader();
        initBackgroundShader();
        initSpaceshipShader();
        initEnemyShader();
        initRocketShader();

        initTexture();

        // init de tous les objets
        heightfield = new Heightfield();
        background = new Background(fbo.texture(0));
        spaceship = new Spaceship();

        // la couleur de fond sera noire
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        // active le teste de profondeur
        //gl.enable(gl.DEPTH_TEST);
        gl.enable(gl.DEPTH_TEST);
        gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);

        /* Mouse and keyboard interaction functions */
        //canvas.addEventListener('mousedown', tbMouseDown, true);
        canvas.addEventListener('mousemove', mouseMove, true);
        //canvas.addEventListener('mouseup', tbMouseUp, true);
        canvas.addEventListener('click', mouseClick, true);
        document.onkeydown = handleKeyDown;
        document.onkeyup = handleKeyUp;

    }

    // Variables globales
    var spaceshipTexture;
    var enemyTexture;
    var rocketTexture;

    function initTexture() {
        spaceshipTexture = gl.createTexture();
        spaceshipTexture.image = new Image();
        spaceshipTexture.image.src = "resources/spaceship.png";
        spaceshipTexture.image.onload = function () {
            handleLoadedTexture(spaceshipTexture);
        }


        enemyTexture = gl.createTexture();
        enemyTexture.image = new Image();
        enemyTexture.image.src = "resources/enemy.png";
        enemyTexture.image.onload = function () {
            handleLoadedTexture(enemyTexture);
        }


        rocketTexture = gl.createTexture();
        rocketTexture.image = new Image();
        rocketTexture.image.src = "resources/fire-shoot.png";
        rocketTexture.image.onload = function () {
            handleLoadedTexture(rocketTexture);
        }
    }

    /**
     * Génère de façon aléatoire un ennemi dans enemies[]
     * Appelé dans le tick
     */
    function generateEnemies() {
        if(Math.random() > 0.975 - ratioPopEnemies) {
            enemies.push(new Enemy());
        }

    }




</script>


</head>


<body onload="webGLStart();">

<div class="main-section">
    <div class="canvas">
        <canvas id="SpaceShip" style="border: none;" width="800" height="800"></canvas>
    </div>
    <div id="interface">
        <h1>Shlag Invaders</h1>
        <nav>
            <div class="btn-logic">
                <button type="button" onclick="startGame()">Start</button>
                <button type="button" onclick="stopGame()">Stop</button>
                <button type="button" onclick="resetGame()">Reset</button>
            </div>
            <div id="lvl">
                <p>lvl :</p>
            </div>
            <div id="score">
                <p>score : </p>
            </div>
        </nav>
    </div>
    <div id="GameOver">
        <img src="resources/gameover.png">
    </div>
</div>



</body></html>
